var documenterSearchIndex = {"docs":
[{"location":"cartpole.html#.-Cartpole-Adding-Constraints","page":"2. Cartpole - Adding Constraints","title":"2. Cartpole - Adding Constraints","text":"","category":"section"},{"location":"examples.html#Tutorial","page":"Examples","title":"Tutorial","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This package contains several Jupyter notebooks that walk through various aspects of the Altro.jl and TrajectoryOptimization.jl ecosystem. We plan to add additional examples highlight new features as they are released.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This page provides an overview of these notebooks, which are meant to be done in order.","category":"page"},{"location":"examples.html#.-Pendulum:-Getting-Started","page":"Examples","title":"1. Pendulum: Getting Started","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This introductory problem provides a good in-depth introduction to the various packages  by setting up your own dynamics model and solving an unconstrained optimization problem  with Altro. It covers the following topics:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Defining your own dynamics model\nDefining a quadratic cost function\nSetting up a problem\nCreating the solver\nCalling the solve! method\nAnalyzing the results\nPlotting the output trajectory\nBenchmarking\nImproving performance with StaticArrays.jl","category":"page"},{"location":"examples.html#.-Cartpole:-Adding-Constraints","page":"Examples","title":"2. Cartpole: Adding Constraints","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This examples builds on the ideas set up in the pendulum problem, and adds constraints.  It provides some insight on how to efficiently tune the hyperparameters for ALTRO when  solving constrained optimization problems.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"More on defining your own model\nAdding pre-defined constraints\nPlotting the results\nChanging solver parameters / hyperparameter tuning tips","category":"page"},{"location":"examples.html#.-Quadrotor:-Rigid-Bodies","page":"Examples","title":"3. Quadrotor: Rigid Bodies","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Using a quadrotor as the canonical example, this problem demonstrates how to define trajectory optimization problems for single rigid bodies, whose state is defined by a 3D rotation. It provides a good introductory example of working with these types of systems, as well as an introduction on how to visualize them easily with TrajOptPlots.jl.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Defining dynamics for single rigid bodies\nCost functions for rigid bodies\n3D visualization w/ TrajOptPlots\nAdding model disturbances\nTracking the reference trajectory with TV-LQR\nImporting 3D meshes for visualization of single rigid bodies","category":"page"},{"location":"examples.html#.-Unicycle-Model:-Infeasible-Start","page":"Examples","title":"4. Unicycle Model: Infeasible Start","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This example focuses on obstacle avoidance and providing the solver with an initial guess for the state trajectory. ","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Obstacle avoidance constraints\nVisualizing 2D problems\nProviding a smooth initial guess for the states\nSolving an \"infeasible start\" problem with ALTRO","category":"page"},{"location":"examples.html#.-Rocket-Model-Predictive-Control-(MPC)","page":"Examples","title":"5. Rocket Model-Predictive Control (MPC)","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This example demonstrates the use of linear dynamics models and how to set up an run a basic MPC problem that tracks a reference trajectory output by a long-horizon solution out of ALTRO. It also demonstrates the use of second-order cone constraints.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Defining a linear model\nDefining second-order cone constraints\nDefining custom constraints\nSetting up and solving an MPC problem w/ a reference trajectory","category":"page"},{"location":"index.html#Altro-Tutorials","page":"Introduction","title":"Altro Tutorials","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Welcome to the tutorials site for Altro.jl! This page is dedicated to providing an extensive suite of useful examples and walkthroughs intended to help newcomers and experienced users alike. ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: Note\nWhile many aspects of the APIs for Altro.jl, TrajectoryOptimization.jl,  RobotDynamics.jl, and related packages will be exposed and explained throughout these  tutorials, this is not intended to replace the documentation provided by these packages. In the event of any discrepancy, the package documentation take precedence.","category":"page"},{"location":"index.html#Overview-of-Optimal-Control","page":"Introduction","title":"Overview of Optimal Control","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Optimal control is a powerful class of algorithms aimed at finding optimal control policies for controlling dynamical systems. Algorithms developed by the optimal control community  over the last 70 years have been succesfully applied to space systems, rockets, airplanes, and a wide variety of robotic and autonomous systems. Trajectory optimization is a powerful sub-field of optimal control where the goal is to find a trajectory that minimizes some  cost function while obey the system dynamics, as well any additional contraints such as  actuator or joint limits, operational areas, or obstacle avoidance. ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The packages in the Altro.jl ecosystem are focused on the application of trajectory  optimization to the field of robotics. These problems typically take the following form:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"beginaligned\n  min_x_1Nu_1N-1 quad  ell_f(x_N) + sum_k=0^N-1 ell_k(x_k u_k dt) \n  textrmst            quad  x_k+1 = f(x_k u_k) \n                                  g_k(x_ku_k) = 0 \n                                  h_k(x_ku_k) leq_K 0\nendaligned","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"where x in mathbbR^n and u in mathbbR^m are the state and control vectors,  N is the number of knot points, ell is a cost function, f(xu) are the system  dynamics, g_k(xu) are smooth equality constraints at time step k, and h_k(x_ku_k)  are generalized inequality constraints at timestep k with respect to the cone K.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Critically, optimization problems of this form exhibit Markovianity, which in practice  means that the states and controls at any timestep are only coupled to those at adjacent  time steps. This property imparts a unique banded structure to the underlying system  of equations. Leveraging this problem structure is key to good performance. ","category":"page"},{"location":"index.html#Ecosystem-Overview","page":"Introduction","title":"Ecosystem Overview","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Altro.jl is one package in a suite of packages developed by the Robotic Exploration Lab at Stanford and Carnegie Mellon Universities aimed at pushing the computational and  algorithmic limits of optimal control. The packages are summarized below.","category":"page"},{"location":"index.html#Core-Packages","page":"Introduction","title":"Core Packages","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"RobotDynamics.jl: Provides methods for describing controlled dynamical systems, with ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"an emphasis on single rigid bodies. It provides a common Julia interface for querying  system dynamics and derivatives. Derivatives can be obtained using either automatic  differentiation or finite differencing.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"TrajectoryOptimization.jl: A convenient API for describing trajectory optimization ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"problems. It also provides functionality for evaluating costs, constraints, and their  derivatives. This interface is intended to be utilized by trajectory optimization solvers  such as Altro.jl.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Altro.jl: A state-of-the-art trajectory optimization solver that uses augmented Lagrangian","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"and iterative LQR (iLQR) to solve general nonlinear, constrained trajectory optimization  problems. It accepts problems described using TrajectoryOptimization problems.","category":"page"},{"location":"index.html#Related-Packages","page":"Introduction","title":"Related Packages","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"RobotZoo.jl: A set of canonical mathematical models for nonlinear systems, implemented ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"within the RobotDynamics interface.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"TrajOptPlots.jl: Provides visualization utilities for TrajectoryOptimization.jl, including","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"3D visualization via MeshCat.jl.","category":"page"},{"location":"pendulum.html#.-Pendulum-The-Basics","page":"1. Pendulum - The Basics","title":"1. Pendulum - The Basics","text":"","category":"section"}]
}
